알고리즘_발표대본

(p1)안녕하세요 AD조 발표 시작하겠습니다.
저희 조는 지역 축제 탐방 최단 경로 알고리즘을 제작해보았습니다.
사용자가 입력한 지역에 맞춘 최적의 축제 탐방 경로를 제공하는 알고리즘 입니다.

(p2)저희 조의 목차는 다음과 같습니다

(p3) 먼저 이 프로그램을 제작하게된 목적입니다. 최근 지역 축제가 다양해지고 그에 대한 관심이 높아지면서, 점점 더 많은 사람들이 참여하고자 하는 것을 볼 수 있었습니다. 이처럼 시간을 아끼면서 다양한 축제를 즐기기 위한 방법으로는 최적의 루트 찾기가 필요하다고 생각하여 이 프로그램을 제작하게 되었습니다. 
 즉 저희 프로그램은  사용자들이 관심 있는 지역의 축제를 탐방할 때, 시간이 많이 걸리는 문제를 해결하고자 하였고 시간 절약, 축제 정보에 대한 접근성 향상, 관광 계획을 간소화 하자는 목적을 가지고 있습니다. 

(p4)저희 프로젝트를 구현하기에 앞서, 먼저 데이터를 수집하였습니다 국내 관광정보 포털인 구석구석이라는 웹 사이트를 사용하여 축제 정보를 웹 크롤링을 통해 데이터를 확보하였습니다

(p5) 데이터 전처리 과정입니다. 사이트를 보면 지역과 시기를 검색하여 축제 정보를 얻을 수 있는 것을 확인하였습니다. 이처럼 저희도 사용자가 지역과 시기를 입력하면 지역별로 축제 이름을 출력하도록 필터링하였습니다

(p6) 웹 페이지에서 서울의 12월에 열리는 축제를 검색해 본 결과와 웹 크롤링 한 결과를 비교해보면 정확히 모두 크롤링 해온것을 확인할 수 있었습니다.

(p7) 그 다음으로 최적의 축제 탐방 경로를 계산하기 위한 거리 데이터 수집 및 전처리 과정입니다. 거리 관련한 api는 돈을 지불해야하거나, 두 주소간의 직선거리를 바로 제공해주는 api는 존재하지 않아 고민하던 중에 직접 직선거리를 구해 데이터를 생성하였습니다.
왼쪽의 경기도 텍스트 파일처럼 가천대를 기준으로 거리와 경기도 내 각 지역끼리의 거리 정보를 저장해놨으며 이 파일은 한국관광공사의 웹 페이지의 지역 검색 창과 동일하게 지역을 나눠 저장했습니다 오른쪽 코드와 그림을 보면 거리 정보가 담긴 텍스트 파일을 읽고 서로 양방향으로 정보를 잘 저장하고 있는 것을 확인할 수 있습니다. 

(p8) 다음으로 최적의 축제 탐방 경로를 제작하기 위해 사용한 알고리즘 입니다. 

저희가 사용한 그리디 알고리즘이란? 매 순간 가장 최적의 선택으로 문제해결을 하는 알고리즘입니다. 각 단계에 따라 가장 최적화된 선택을 하고, 이를 반복해 전체 문제의 해결값을 알아냅니다. 
즉 그리디 알고리즘으로 현재 위치에서 가장 가까운 축제를 반복적으로 선택하여 전체 경로를 생성합니다.  축제 탐방 경로 최적화 할 시, 각 단계에서 이동 거리를 최소화하는 것이 핵심이었습니다.
제안서에선 다익스트라 알고리즘을 사용한다고 하였지만, 다익스트라 알고리즘은 시작점에서 모든 정점까지의 최단 경로를 계산하기에 출발점과 도착점이 고정되어 있을 때 더 적합합니다. 저희 조 문제는 모든 축제 간 이동 경로 최적화로 출발 이후 모든 노드를 방문해야 하기에 그리디 알고리즘으로 구현과정 중 바꾸게 되었습니다.


(p9) 최종 구현 방법입니다. 데이터를 모으기 위해 웹 크롤링을 진행하였고 사용자의 입력값에 맞춰 데이터 필터링을 하였습니다 그 다음 최적의 경로를 찾기 위해 그리디 알고리즘을 사용해 계산을 히였고 이는 지역 별 이동 거리가 짧은 경로를 찾아주도록 하였습니다.

(p10) 마지막으로 저희가 짠 코드에 대해 간략하게 설명하겠습니다 저희는 코랩에서 파이썬 언어를 사용하였습니다.
먼저 웹 크롤링을 하기 위한 환경을 설치해줍니다

(p11) 그 다음 웹 크롤링을 통해 사용자의 입력값에 맞춘 축제들의 정보를 가져옵니다. 오른쪽 사진은 크롤링 후 축제 정보를 정확히 가져왔는지 확인한 결과값입니다

(p12) 이후 거리 정보를 담고 있는 지역별 텍스트 파일을 읽어옵니다

(p13) 마지막으로 그리디 알고리즘을 사용하여 최적의 경로를 찾는 계산을 진행합니다

(p14) 최종 결과입니다 사용자가 경기도 12월을 입력하였을 때의 결과값입니다. 출발지는 가천대로 고정이므로 결과에 따르면 광주시 -> 양평군 -> 가평군 -> 용인시 ... 등의 순서로 이동하는 것이 최적의 값 입니다.

(p15) 저희 프로그램의 한계입니다.
이전 결과를 보면 같은 지역 내 여러개의 축제가 열리는 경우가 존재합니다. 저희는 모든 축제의 거리 정보를 데이터로 수집하지 못하여 같은 지역내에서의 이동 경로에 대해서는 제공하지 못했습니다. 이후 거리 계산하는 api를 사용한다면 보다 더 정확하게 이동경로를 제공할 수 있을 것으로 예상합니다
이 뿐만 아니라 그리디알고리즘은 항상 최적의 솔루션을 제공하지 않는다는 한계점이 존재합니다 현재 위치에서 가장 가까운 경로를 찾아 이동하는 그리디 알고리즘으로 최적의 솔루션을 제공하지 않을 수 있지만 이는 구현하기 심플하며 빠르게 근사값을 얻을 수 있다는 장점이 있어 그리디 알고리즘을 사용하게 되었습니다.

(p16) 마지막으로 거리 텍스트 파일과 사용한 코드는 모두 이 깃허브에서 확인할 수 있습니다

(p17) 저희의 역할 분담입니다

(p18) 이상으로 발표를 마치겠습니다 감사합니다

